//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "clothing")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub price: i32,
    pub image: String,
    pub create_at: DateTimeWithTimeZone,
    pub boss_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::boss::Entity",
        from = "Column::BossId",
        to = "super::boss::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Boss,
    #[sea_orm(has_many = "super::procurement_item::Entity")]
    ProcurementItem,
    #[sea_orm(has_many = "super::production_item::Entity")]
    ProductionItem,
    #[sea_orm(has_many = "super::shipment_item::Entity")]
    ShipmentItem,
}

impl Related<super::boss::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Boss.def()
    }
}

impl Related<super::procurement_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProcurementItem.def()
    }
}

impl Related<super::production_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProductionItem.def()
    }
}

impl Related<super::shipment_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ShipmentItem.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
