//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "production_item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Float")]
    pub uint_price: f32,
    pub count: i32,
    pub production_id: i32,
    pub clothing_id: i32,
    #[sea_orm(column_type = "Float")]
    pub salary: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::clothing::Entity",
        from = "Column::ClothingId",
        to = "super::clothing::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Clothing,
    #[sea_orm(
        belongs_to = "super::production::Entity",
        from = "Column::ProductionId",
        to = "super::production::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Production,
}

impl Related<super::clothing::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clothing.def()
    }
}

impl Related<super::production::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Production.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
