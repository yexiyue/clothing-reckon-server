//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: String,
    pub password: String,
    #[sea_orm(unique)]
    pub phone_number: String,
    pub create_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::boss::Entity")]
    Boss,
    #[sea_orm(has_many = "super::procurement::Entity")]
    Procurement,
    #[sea_orm(has_many = "super::shipment::Entity")]
    Shipment,
    #[sea_orm(has_many = "super::staff::Entity")]
    Staff,
}

impl Related<super::boss::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Boss.def()
    }
}

impl Related<super::procurement::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Procurement.def()
    }
}

impl Related<super::shipment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Shipment.def()
    }
}

impl Related<super::staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Staff.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
